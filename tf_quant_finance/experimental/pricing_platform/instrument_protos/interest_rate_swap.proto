// Instrument protos for swaps.
syntax = "proto3";

package tf_quant_finance.experimental.pricing_platform.instrument_protos;

import "tf_quant_finance/experimental/pricing_platform/instrument_protos/business_days.proto";
import "tf_quant_finance/experimental/pricing_platform/instrument_protos/currencies.proto";
import "tf_quant_finance/experimental/pricing_platform/instrument_protos/date.proto";
import "tf_quant_finance/experimental/pricing_platform/instrument_protos/day_count_conventions.proto";
import "tf_quant_finance/experimental/pricing_platform/instrument_protos/decimal.proto";
import "tf_quant_finance/experimental/pricing_platform/instrument_protos/metadata.proto";
import "tf_quant_finance/experimental/pricing_platform/instrument_protos/period.proto";
import "tf_quant_finance/experimental/pricing_platform/instrument_protos/rate_indices.proto";

// Floating swap leg description
message FloatingLeg {
  // Underlying currency
  Currency currency = 1;
  // Reset frequency
  Period reset_frequency = 2;
  // Coupon frequency
  Period coupon_frequency = 3;
  // Notional amount for the leg
  Decimal notional_amount = 4;
  // Floating rate type
  RateIndexType floating_rate_type = 5;
  // Float leg day count convention.
  DayCountConvention day_count_convention = 6;
  // Business day convention
  BusinessDayConvention business_day_convention = 7;
  // Settlement days
  int32 settlement_days = 8;
  // Coupon basis points
  Decimal basis_points = 9;
  // Holiday calendar
  BankHolidays bank_holidays = 10;
}

message FixedLeg {
  // Underlying currency
  Currency currency = 1;
  // Coupon frequency
  Period coupon_frequency = 2;
  // Notional amount for the leg
  Decimal notional_amount = 3;
  // Fixed leg rate
  Decimal fixed_rate = 4;
  // Fixed leg day count convention.
  DayCountConvention day_count_convention = 5;
  // Business day convention
  BusinessDayConvention business_day_convention = 6;
  // Settlement days
  int32 settlement_days = 7;
  // Holiday calendar
  BankHolidays bank_holidays = 8;
}

// Swap leg type. Either fixed or floating type. Can be extended to
message SwapLeg {
  oneof type {
    FloatingLeg floating_leg = 1;
    FixedLeg fixed_leg = 2;
  }
}

// Interest rate swap proto
message InterestRateSwap {
  // The effective date of the instrument. Effective date is the date at which
  // the interest rate accumulation starts.
  Date effective_date = 2;
  // Maturity date of the contract
  Date maturity_date = 3;
  // Denominated currency
  Currency currency = 4;
  // Receiver leg
  SwapLeg receive_leg = 5;
  // Payer leg
  SwapLeg pay_leg = 6;
  // Holiday calendar
  BankHolidays bank_holidays = 7;
  // Common metadata needed to identify the trade.
  InstrumentMetadata metadata = 8;
}
